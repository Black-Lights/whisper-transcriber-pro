name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, fixing-bugs ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_DEFAULT_VERSION: '3.10'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/torch
        key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        flake8 src/ main.py tests/ --count --statistics
    
    - name: Format check with black
      run: |
        black --check --diff src/ main.py tests/
    
    - name: Import sort check
      run: |
        isort --check-only --diff src/ main.py tests/
    
    - name: Type check with mypy (non-blocking)
      run: |
        mypy --namespace-packages --explicit-package-bases --ignore-missing-imports src/ main.py || echo "MyPy check completed with issues"
      continue-on-error: true
    
    - name: Test with pytest (basic)
      run: |
        pytest tests/ -v --tb=short -x
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Security linting with bandit
      run: |
        bandit -r src/ main.py -f json -o bandit-report.json || echo "Bandit scan completed"
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check || echo "Safety scan completed"
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: bandit-report.json
        retention-days: 30