name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, fixing-bugs ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_DEFAULT_VERSION: '3.10'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          - os: windows-latest
            python-version: '3.8'

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/torch
        key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'requirements*.txt', 'setup.py') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        flake8 src/ main.py tests/ --count --statistics
    
    - name: Format check with black
      run: |
        black --check --diff src/ main.py tests/
    
    - name: Import sort check
      run: |
        isort --check-only --diff src/ main.py tests/
    
    - name: Type check with mypy
      run: |
        mypy src/ main.py
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src --cov=main --cov-report=xml -m "not slow"
      env:
        DISPLAY: ""
        PYTEST_CURRENT_TEST: "true"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        echo "Safety scan completed"
    
    - name: Security linting with bandit
      run: |
        bandit -r src/ main.py -f json -o bandit-report.json || true
        echo "Bandit scan completed"
        if [ -f bandit-report.json ]; then
          echo "Bandit findings summary:"
          python -c "import json; data=json.load(open('bandit-report.json')); results=data.get('results',[]); print(f'Total: {len(results)}'); [print(f'{s}: {len([r for r in results if r.get(\"issue_severity\")==s])}') for s in ['HIGH','MEDIUM','LOW'] if len([r for r in results if r.get(\"issue_severity\")==s])>0]" 2>/dev/null || echo "Could not parse bandit report"
        fi
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build distribution packages
      run: |
        python -m build
    
    - name: Check distribution
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ github.run_number }}
        path: dist/
        retention-days: 90
    
    - name: Upload to release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}